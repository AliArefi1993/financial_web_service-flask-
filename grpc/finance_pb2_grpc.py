# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import finance_pb2 as finance__pb2


class account_adderStub(object):
    """option java_multiple_files = true;
    option java_package = "io.grpc.examples.helloworld";
    option java_outer_classname = "HelloWorldProto";
    option objc_class_prefix = "HLW";

    package financial;

    The new bank account service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.add_account = channel.unary_unary(
                '/account_adder/add_account',
                request_serializer=finance__pb2.AccountInfoRequest.SerializeToString,
                response_deserializer=finance__pb2.AddingAccountActionReply.FromString,
                )


class account_adderServicer(object):
    """option java_multiple_files = true;
    option java_package = "io.grpc.examples.helloworld";
    option java_outer_classname = "HelloWorldProto";
    option objc_class_prefix = "HLW";

    package financial;

    The new bank account service definition.
    """

    def add_account(self, request, context):
        """Sends a new account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_account_adderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'add_account': grpc.unary_unary_rpc_method_handler(
                    servicer.add_account,
                    request_deserializer=finance__pb2.AccountInfoRequest.FromString,
                    response_serializer=finance__pb2.AddingAccountActionReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'account_adder', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class account_adder(object):
    """option java_multiple_files = true;
    option java_package = "io.grpc.examples.helloworld";
    option java_outer_classname = "HelloWorldProto";
    option objc_class_prefix = "HLW";

    package financial;

    The new bank account service definition.
    """

    @staticmethod
    def add_account(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account_adder/add_account',
            finance__pb2.AccountInfoRequest.SerializeToString,
            finance__pb2.AddingAccountActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class withdrawerStub(object):
    """The withdrawing service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.withdrawal = channel.unary_unary(
                '/withdrawer/withdrawal',
                request_serializer=finance__pb2.CashRequest.SerializeToString,
                response_deserializer=finance__pb2.WithdrawActionReply.FromString,
                )


class withdrawerServicer(object):
    """The withdrawing service definition.
    """

    def withdrawal(self, request, context):
        """Sends a withdrawal
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_withdrawerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'withdrawal': grpc.unary_unary_rpc_method_handler(
                    servicer.withdrawal,
                    request_deserializer=finance__pb2.CashRequest.FromString,
                    response_serializer=finance__pb2.WithdrawActionReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'withdrawer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class withdrawer(object):
    """The withdrawing service definition.
    """

    @staticmethod
    def withdrawal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/withdrawer/withdrawal',
            finance__pb2.CashRequest.SerializeToString,
            finance__pb2.WithdrawActionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class update_credit_incomeStub(object):
    """get financial data
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.credit_and_income = channel.unary_unary(
                '/update_credit_income/credit_and_income',
                request_serializer=finance__pb2.CreditAndIncomeRequest.SerializeToString,
                response_deserializer=finance__pb2.CreditAndIncomeResponse.FromString,
                )


class update_credit_incomeServicer(object):
    """get financial data
    """

    def credit_and_income(self, request, context):
        """Sends a credit and monthly income of service provider
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_update_credit_incomeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'credit_and_income': grpc.unary_unary_rpc_method_handler(
                    servicer.credit_and_income,
                    request_deserializer=finance__pb2.CreditAndIncomeRequest.FromString,
                    response_serializer=finance__pb2.CreditAndIncomeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'update_credit_income', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class update_credit_income(object):
    """get financial data
    """

    @staticmethod
    def credit_and_income(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/update_credit_income/credit_and_income',
            finance__pb2.CreditAndIncomeRequest.SerializeToString,
            finance__pb2.CreditAndIncomeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class transactions_ten_iStub(object):
    """getting an array of {i}th 10 transaction
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.transactions = channel.unary_unary(
                '/transactions_ten_i/transactions',
                request_serializer=finance__pb2.TenITransactionRequest.SerializeToString,
                response_deserializer=finance__pb2.TenITransactionResponse.FromString,
                )


class transactions_ten_iServicer(object):
    """getting an array of {i}th 10 transaction
    """

    def transactions(self, request, context):
        """Sends the i tenth transactions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_transactions_ten_iServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'transactions': grpc.unary_unary_rpc_method_handler(
                    servicer.transactions,
                    request_deserializer=finance__pb2.TenITransactionRequest.FromString,
                    response_serializer=finance__pb2.TenITransactionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'transactions_ten_i', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class transactions_ten_i(object):
    """getting an array of {i}th 10 transaction
    """

    @staticmethod
    def transactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transactions_ten_i/transactions',
            finance__pb2.TenITransactionRequest.SerializeToString,
            finance__pb2.TenITransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class show_accountsStub(object):
    """getting an array of all bank account informations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.accounts = channel.unary_unary(
                '/show_accounts/accounts',
                request_serializer=finance__pb2.accountsRequest.SerializeToString,
                response_deserializer=finance__pb2.accountsResponse.FromString,
                )


class show_accountsServicer(object):
    """getting an array of all bank account informations
    """

    def accounts(self, request, context):
        """Sends the i tenth transactions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_show_accountsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'accounts': grpc.unary_unary_rpc_method_handler(
                    servicer.accounts,
                    request_deserializer=finance__pb2.accountsRequest.FromString,
                    response_serializer=finance__pb2.accountsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'show_accounts', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class show_accounts(object):
    """getting an array of all bank account informations
    """

    @staticmethod
    def accounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/show_accounts/accounts',
            finance__pb2.accountsRequest.SerializeToString,
            finance__pb2.accountsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
